// Code generated by protoc-gen-go.
// source: nlan.proto
// DO NOT EDIT!

/*
Package nlan is a generated protocol buffer package.

It is generated from these files:
	nlan.proto

It has these top-level messages:
	Nlan
	Capabilities
	ClearMode
	Request
	Model
	Dvr
	Subnets
	IpDvr
	Vxlan
	Ptn
	Networks
	L2Vpn
	Links
	Nodes
	Router
	Bgp
	Neighbors
	Ospf
	Vhosts
	VhostProps
	Response
*/
package nlan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NLAN module
type Nlan struct {
	Capabilities *Capabilities `protobuf:"bytes,1,opt,name=Capabilities" json:"Capabilities,omitempty"`
	ClearMode    *ClearMode    `protobuf:"bytes,2,opt,name=ClearMode" json:"ClearMode,omitempty"`
	Request      *Request      `protobuf:"bytes,3,opt,name=Request" json:"Request,omitempty"`
	Response     *Response     `protobuf:"bytes,4,opt,name=Response" json:"Response,omitempty"`
}

func (m *Nlan) Reset()                    { *m = Nlan{} }
func (m *Nlan) String() string            { return proto.CompactTextString(m) }
func (*Nlan) ProtoMessage()               {}
func (*Nlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Nlan) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Nlan) GetClearMode() *ClearMode {
	if m != nil {
		return m.ClearMode
	}
	return nil
}

func (m *Nlan) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Nlan) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type Capabilities struct {
	Capability []string `protobuf:"bytes,1,rep,name=Capability" json:"Capability,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ClearMode struct {
	Terminate bool `protobuf:"varint,1,opt,name=Terminate" json:"Terminate,omitempty"`
}

func (m *ClearMode) Reset()                    { *m = ClearMode{} }
func (m *ClearMode) String() string            { return proto.CompactTextString(m) }
func (*ClearMode) ProtoMessage()               {}
func (*ClearMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Request struct {
	Model *Model `protobuf:"bytes,1,opt,name=Model" json:"Model,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Request) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

type Model struct {
	Dvr    *Dvr    `protobuf:"bytes,1,opt,name=Dvr" json:"Dvr,omitempty"`
	Ptn    *Ptn    `protobuf:"bytes,2,opt,name=Ptn" json:"Ptn,omitempty"`
	Router *Router `protobuf:"bytes,3,opt,name=Router" json:"Router,omitempty"`
	Vhosts *Vhosts `protobuf:"bytes,4,opt,name=Vhosts" json:"Vhosts,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Model) GetDvr() *Dvr {
	if m != nil {
		return m.Dvr
	}
	return nil
}

func (m *Model) GetPtn() *Ptn {
	if m != nil {
		return m.Ptn
	}
	return nil
}

func (m *Model) GetRouter() *Router {
	if m != nil {
		return m.Router
	}
	return nil
}

func (m *Model) GetVhosts() *Vhosts {
	if m != nil {
		return m.Vhosts
	}
	return nil
}

type Dvr struct {
	OvsBridges bool       `protobuf:"varint,1,opt,name=OvsBridges" json:"OvsBridges,omitempty"`
	Subnets    []*Subnets `protobuf:"bytes,2,rep,name=Subnets" json:"Subnets,omitempty"`
	Vxlan      []*Vxlan   `protobuf:"bytes,3,rep,name=Vxlan" json:"Vxlan,omitempty"`
}

func (m *Dvr) Reset()                    { *m = Dvr{} }
func (m *Dvr) String() string            { return proto.CompactTextString(m) }
func (*Dvr) ProtoMessage()               {}
func (*Dvr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Dvr) GetSubnets() []*Subnets {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *Dvr) GetVxlan() []*Vxlan {
	if m != nil {
		return m.Vxlan
	}
	return nil
}

type Subnets struct {
	IpDvr []*IpDvr `protobuf:"bytes,1,rep,name=IpDvr" json:"IpDvr,omitempty"`
	Peers []string `protobuf:"bytes,2,rep,name=Peers" json:"Peers,omitempty"`
	Ports []string `protobuf:"bytes,3,rep,name=Ports" json:"Ports,omitempty"`
	Vid   uint32   `protobuf:"varint,4,opt,name=Vid" json:"Vid,omitempty"`
	Vni   uint32   `protobuf:"varint,5,opt,name=Vni" json:"Vni,omitempty"`
}

func (m *Subnets) Reset()                    { *m = Subnets{} }
func (m *Subnets) String() string            { return proto.CompactTextString(m) }
func (*Subnets) ProtoMessage()               {}
func (*Subnets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Subnets) GetIpDvr() []*IpDvr {
	if m != nil {
		return m.IpDvr
	}
	return nil
}

type IpDvr struct {
	Addr string `protobuf:"bytes,1,opt,name=Addr" json:"Addr,omitempty"`
	Dhcp string `protobuf:"bytes,2,opt,name=Dhcp" json:"Dhcp,omitempty"`
	Mode string `protobuf:"bytes,3,opt,name=Mode" json:"Mode,omitempty"`
}

func (m *IpDvr) Reset()                    { *m = IpDvr{} }
func (m *IpDvr) String() string            { return proto.CompactTextString(m) }
func (*IpDvr) ProtoMessage()               {}
func (*IpDvr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Vxlan struct {
	LocalIp   string   `protobuf:"bytes,1,opt,name=LocalIp" json:"LocalIp,omitempty"`
	RemoteIps []string `protobuf:"bytes,2,rep,name=RemoteIps" json:"RemoteIps,omitempty"`
}

func (m *Vxlan) Reset()                    { *m = Vxlan{} }
func (m *Vxlan) String() string            { return proto.CompactTextString(m) }
func (*Vxlan) ProtoMessage()               {}
func (*Vxlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Ptn struct {
	Networks []*Networks `protobuf:"bytes,1,rep,name=Networks" json:"Networks,omitempty"`
}

func (m *Ptn) Reset()                    { *m = Ptn{} }
func (m *Ptn) String() string            { return proto.CompactTextString(m) }
func (*Ptn) ProtoMessage()               {}
func (*Ptn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Ptn) GetNetworks() []*Networks {
	if m != nil {
		return m.Networks
	}
	return nil
}

type Networks struct {
	Id    string   `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	L2Vpn []*L2Vpn `protobuf:"bytes,2,rep,name=L2Vpn" json:"L2Vpn,omitempty"`
	Links *Links   `protobuf:"bytes,3,opt,name=Links" json:"Links,omitempty"`
	Nodes *Nodes   `protobuf:"bytes,4,opt,name=Nodes" json:"Nodes,omitempty"`
}

func (m *Networks) Reset()                    { *m = Networks{} }
func (m *Networks) String() string            { return proto.CompactTextString(m) }
func (*Networks) ProtoMessage()               {}
func (*Networks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Networks) GetL2Vpn() []*L2Vpn {
	if m != nil {
		return m.L2Vpn
	}
	return nil
}

func (m *Networks) GetLinks() *Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Networks) GetNodes() *Nodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type L2Vpn struct {
	Ip    string   `protobuf:"bytes,1,opt,name=Ip" json:"Ip,omitempty"`
	Peers []string `protobuf:"bytes,2,rep,name=Peers" json:"Peers,omitempty"`
	Vid   uint32   `protobuf:"varint,3,opt,name=Vid" json:"Vid,omitempty"`
	Vni   uint32   `protobuf:"varint,4,opt,name=Vni" json:"Vni,omitempty"`
}

func (m *L2Vpn) Reset()                    { *m = L2Vpn{} }
func (m *L2Vpn) String() string            { return proto.CompactTextString(m) }
func (*L2Vpn) ProtoMessage()               {}
func (*L2Vpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Links struct {
	LocalIp   string   `protobuf:"bytes,1,opt,name=LocalIp" json:"LocalIp,omitempty"`
	RemoteIps []string `protobuf:"bytes,2,rep,name=RemoteIps" json:"RemoteIps,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Nodes struct {
	L2Sw string `protobuf:"bytes,1,opt,name=L2Sw" json:"L2Sw,omitempty"`
	Ptn  string `protobuf:"bytes,2,opt,name=Ptn" json:"Ptn,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type Router struct {
	Bgp         []*Bgp  `protobuf:"bytes,1,rep,name=Bgp" json:"Bgp,omitempty"`
	EmbeddedBgp bool    `protobuf:"varint,2,opt,name=EmbeddedBgp" json:"EmbeddedBgp,omitempty"`
	Loopback    string  `protobuf:"bytes,3,opt,name=Loopback" json:"Loopback,omitempty"`
	Ospf        []*Ospf `protobuf:"bytes,4,rep,name=Ospf" json:"Ospf,omitempty"`
}

func (m *Router) Reset()                    { *m = Router{} }
func (m *Router) String() string            { return proto.CompactTextString(m) }
func (*Router) ProtoMessage()               {}
func (*Router) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Router) GetBgp() []*Bgp {
	if m != nil {
		return m.Bgp
	}
	return nil
}

func (m *Router) GetOspf() []*Ospf {
	if m != nil {
		return m.Ospf
	}
	return nil
}

type Bgp struct {
	As        uint32       `protobuf:"varint,1,opt,name=As" json:"As,omitempty"`
	Neighbors []*Neighbors `protobuf:"bytes,2,rep,name=Neighbors" json:"Neighbors,omitempty"`
}

func (m *Bgp) Reset()                    { *m = Bgp{} }
func (m *Bgp) String() string            { return proto.CompactTextString(m) }
func (*Bgp) ProtoMessage()               {}
func (*Bgp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Bgp) GetNeighbors() []*Neighbors {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type Neighbors struct {
	NextHopSelf          bool   `protobuf:"varint,1,opt,name=NextHopSelf" json:"NextHopSelf,omitempty"`
	Peer                 string `protobuf:"bytes,2,opt,name=Peer" json:"Peer,omitempty"`
	RemoteAs             uint32 `protobuf:"varint,3,opt,name=RemoteAs" json:"RemoteAs,omitempty"`
	RouteReflectorClient bool   `protobuf:"varint,4,opt,name=RouteReflectorClient" json:"RouteReflectorClient,omitempty"`
}

func (m *Neighbors) Reset()                    { *m = Neighbors{} }
func (m *Neighbors) String() string            { return proto.CompactTextString(m) }
func (*Neighbors) ProtoMessage()               {}
func (*Neighbors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Ospf struct {
	Area     string   `protobuf:"bytes,1,opt,name=Area" json:"Area,omitempty"`
	Networks []string `protobuf:"bytes,2,rep,name=Networks" json:"Networks,omitempty"`
}

func (m *Ospf) Reset()                    { *m = Ospf{} }
func (m *Ospf) String() string            { return proto.CompactTextString(m) }
func (*Ospf) ProtoMessage()               {}
func (*Ospf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Vhosts struct {
	VhostProps []*VhostProps `protobuf:"bytes,1,rep,name=VhostProps" json:"VhostProps,omitempty"`
}

func (m *Vhosts) Reset()                    { *m = Vhosts{} }
func (m *Vhosts) String() string            { return proto.CompactTextString(m) }
func (*Vhosts) ProtoMessage()               {}
func (*Vhosts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Vhosts) GetVhostProps() []*VhostProps {
	if m != nil {
		return m.VhostProps
	}
	return nil
}

type VhostProps struct {
	Network string `protobuf:"bytes,1,opt,name=Network" json:"Network,omitempty"`
	Vhosts  uint32 `protobuf:"varint,2,opt,name=Vhosts" json:"Vhosts,omitempty"`
}

func (m *VhostProps) Reset()                    { *m = VhostProps{} }
func (m *VhostProps) String() string            { return proto.CompactTextString(m) }
func (*VhostProps) ProtoMessage()               {}
func (*VhostProps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type Response struct {
	Exit       uint32 `protobuf:"varint,1,opt,name=Exit" json:"Exit,omitempty"`
	LogMessage string `protobuf:"bytes,2,opt,name=LogMessage" json:"LogMessage,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func init() {
	proto.RegisterType((*Nlan)(nil), "nlan.Nlan")
	proto.RegisterType((*Capabilities)(nil), "nlan.Capabilities")
	proto.RegisterType((*ClearMode)(nil), "nlan.ClearMode")
	proto.RegisterType((*Request)(nil), "nlan.Request")
	proto.RegisterType((*Model)(nil), "nlan.Model")
	proto.RegisterType((*Dvr)(nil), "nlan.Dvr")
	proto.RegisterType((*Subnets)(nil), "nlan.Subnets")
	proto.RegisterType((*IpDvr)(nil), "nlan.IpDvr")
	proto.RegisterType((*Vxlan)(nil), "nlan.Vxlan")
	proto.RegisterType((*Ptn)(nil), "nlan.Ptn")
	proto.RegisterType((*Networks)(nil), "nlan.Networks")
	proto.RegisterType((*L2Vpn)(nil), "nlan.L2Vpn")
	proto.RegisterType((*Links)(nil), "nlan.Links")
	proto.RegisterType((*Nodes)(nil), "nlan.Nodes")
	proto.RegisterType((*Router)(nil), "nlan.Router")
	proto.RegisterType((*Bgp)(nil), "nlan.Bgp")
	proto.RegisterType((*Neighbors)(nil), "nlan.Neighbors")
	proto.RegisterType((*Ospf)(nil), "nlan.Ospf")
	proto.RegisterType((*Vhosts)(nil), "nlan.Vhosts")
	proto.RegisterType((*VhostProps)(nil), "nlan.VhostProps")
	proto.RegisterType((*Response)(nil), "nlan.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for NlanAgent service

type NlanAgentClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Hello(ctx context.Context, in *Capabilities, opts ...grpc.CallOption) (*Capabilities, error)
	Clear(ctx context.Context, in *ClearMode, opts ...grpc.CallOption) (*Response, error)
}

type nlanAgentClient struct {
	cc *grpc.ClientConn
}

func NewNlanAgentClient(cc *grpc.ClientConn) NlanAgentClient {
	return &nlanAgentClient{cc}
}

func (c *nlanAgentClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/nlan.NlanAgent/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nlanAgentClient) Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/nlan.NlanAgent/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nlanAgentClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/nlan.NlanAgent/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nlanAgentClient) Hello(ctx context.Context, in *Capabilities, opts ...grpc.CallOption) (*Capabilities, error) {
	out := new(Capabilities)
	err := grpc.Invoke(ctx, "/nlan.NlanAgent/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nlanAgentClient) Clear(ctx context.Context, in *ClearMode, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/nlan.NlanAgent/Clear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NlanAgent service

type NlanAgentServer interface {
	Add(context.Context, *Request) (*Response, error)
	Update(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	Hello(context.Context, *Capabilities) (*Capabilities, error)
	Clear(context.Context, *ClearMode) (*Response, error)
}

func RegisterNlanAgentServer(s *grpc.Server, srv NlanAgentServer) {
	s.RegisterService(&_NlanAgent_serviceDesc, srv)
}

func _NlanAgent_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NlanAgentServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NlanAgent_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NlanAgentServer).Update(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NlanAgent_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NlanAgentServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NlanAgent_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Capabilities)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NlanAgentServer).Hello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NlanAgent_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClearMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NlanAgentServer).Clear(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _NlanAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nlan.NlanAgent",
	HandlerType: (*NlanAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _NlanAgent_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NlanAgent_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NlanAgent_Delete_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _NlanAgent_Hello_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _NlanAgent_Clear_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x5d, 0x4f, 0xdb, 0x4a,
	0x10, 0xbd, 0x89, 0x13, 0x88, 0x37, 0x04, 0x72, 0xf7, 0x5e, 0x5d, 0x45, 0x08, 0x21, 0xb4, 0xba,
	0xa5, 0xf4, 0x0b, 0xa9, 0xa9, 0xfa, 0xd6, 0x97, 0xf0, 0x21, 0x11, 0x29, 0x04, 0x14, 0x4a, 0xde,
	0x5a, 0xc9, 0x89, 0x87, 0xe0, 0x62, 0xbc, 0xae, 0xd7, 0x7c, 0xf4, 0x8f, 0xf4, 0x37, 0xf6, 0x67,
	0x74, 0x67, 0x76, 0x9c, 0x18, 0xca, 0x03, 0x6f, 0xde, 0x33, 0x67, 0x77, 0xe6, 0x9c, 0x9d, 0x1d,
	0x0b, 0x91, 0xc4, 0x41, 0xb2, 0x9b, 0x66, 0x3a, 0xd7, 0xb2, 0x86, 0xdf, 0xea, 0x67, 0x45, 0xd4,
	0x86, 0xf6, 0x43, 0xee, 0x88, 0x95, 0xfd, 0x20, 0x0d, 0x26, 0x51, 0x1c, 0xe5, 0x11, 0x98, 0x4e,
	0x65, 0xab, 0xb2, 0xd3, 0xec, 0xca, 0x5d, 0xda, 0x51, 0x8e, 0x48, 0x25, 0xfc, 0xfd, 0x18, 0x82,
	0xec, 0x58, 0x87, 0xd0, 0xa9, 0x12, 0x6d, 0x8d, 0x69, 0x05, 0x2c, 0x37, 0xc5, 0xf2, 0x08, 0xbe,
	0xdf, 0x80, 0xc9, 0x3b, 0x1e, 0x31, 0x5a, 0x8e, 0xc1, 0xa0, 0xdc, 0x12, 0x8d, 0x11, 0x98, 0x54,
	0x27, 0x06, 0x3a, 0x35, 0x22, 0xac, 0x16, 0x04, 0x87, 0x2a, 0xf5, 0xb0, 0x1e, 0x29, 0x85, 0x98,
	0xaf, 0x7f, 0xd8, 0xea, 0xbc, 0x1d, 0x5f, 0x6d, 0x96, 0x2a, 0x91, 0x7f, 0x0b, 0xff, 0x33, 0x64,
	0xd7, 0x51, 0x12, 0xe4, 0x40, 0xd5, 0x37, 0xd4, 0x8b, 0x79, 0x15, 0x72, 0x5d, 0xd4, 0x91, 0x15,
	0xb3, 0xae, 0xa6, 0xcb, 0x46, 0x90, 0x32, 0x1c, 0x93, 0xff, 0x09, 0xef, 0xe0, 0x36, 0x63, 0x8a,
	0xef, 0x28, 0x16, 0x40, 0xfc, 0x34, 0x4f, 0x58, 0x2b, 0xe3, 0x16, 0x90, 0x1b, 0x62, 0x69, 0xa4,
	0x6f, 0x72, 0xc8, 0x58, 0xe4, 0x0a, 0x6b, 0x20, 0x0c, 0xa3, 0xe3, 0x4b, 0x6d, 0x72, 0xc3, 0x0a,
	0x39, 0xea, 0x30, 0x75, 0x4e, 0xb9, 0x50, 0xd6, 0xc9, 0xad, 0xd9, 0xcb, 0xa2, 0x70, 0xc6, 0xa6,
	0x37, 0xd0, 0xbc, 0xb3, 0x9b, 0x49, 0x02, 0x76, 0x67, 0xd5, 0xea, 0x9c, 0x9b, 0xc7, 0x20, 0x6a,
	0x19, 0xdf, 0x5b, 0xc0, 0x66, 0xf5, 0x16, 0x5a, 0x08, 0x52, 0x5f, 0xe6, 0x7b, 0x91, 0xd6, 0x4f,
	0x9d, 0x9e, 0x12, 0x8d, 0x20, 0xd9, 0x12, 0xf5, 0x53, 0x80, 0xcc, 0x25, 0xf0, 0x69, 0xa9, 0x33,
	0x9b, 0xcf, 0xa3, 0x65, 0x53, 0x78, 0xe3, 0x28, 0xa4, 0xb2, 0x5b, 0xb4, 0x48, 0xa2, 0x4e, 0x1d,
	0x17, 0xea, 0x3d, 0x9f, 0x29, 0x57, 0x44, 0xad, 0x17, 0x86, 0xce, 0x2b, 0x1f, 0x57, 0x07, 0x97,
	0xd3, 0x94, 0x1c, 0xa2, 0x15, 0xf5, 0x06, 0x9a, 0xe2, 0xab, 0x37, 0x5c, 0xad, 0x5c, 0x13, 0xcb,
	0x03, 0x3d, 0x0d, 0xe2, 0x7e, 0xca, 0xbb, 0xec, 0x8d, 0x8d, 0xe0, 0x5a, 0xe7, 0xd0, 0x4f, 0xb9,
	0x10, 0xf5, 0x92, 0x9c, 0xc6, 0xf6, 0x18, 0x42, 0x7e, 0xa7, 0xb3, 0x2b, 0xc3, 0xd5, 0x73, 0x7b,
	0x14, 0xa8, 0xfa, 0xb6, 0x60, 0x58, 0x0b, 0xab, 0xfd, 0x90, 0xcf, 0xb4, 0xa2, 0x07, 0xdd, 0x71,
	0x9a, 0xb0, 0x73, 0x2c, 0x9a, 0x20, 0x8a, 0x45, 0xc9, 0x95, 0xe1, 0xdb, 0x2a, 0x62, 0x08, 0x61,
	0x6c, 0x68, 0x6b, 0x2e, 0xee, 0x8a, 0x63, 0x04, 0xa9, 0x4f, 0x7c, 0x26, 0x25, 0x2a, 0x8a, 0x7f,
	0xe4, 0x20, 0x5b, 0xe6, 0x95, 0x2d, 0x23, 0xff, 0x50, 0xbf, 0x4b, 0xf1, 0x1c, 0xfd, 0x8a, 0xcb,
	0x40, 0x0f, 0x07, 0xdd, 0xb3, 0x3b, 0x66, 0x36, 0x17, 0x0d, 0xe8, 0xab, 0xa0, 0xe8, 0x3a, 0xec,
	0xcb, 0xbd, 0x59, 0xca, 0x0e, 0x71, 0x5f, 0x5a, 0x40, 0xfe, 0x23, 0x9a, 0x87, 0xd7, 0x13, 0x08,
	0x43, 0x08, 0x31, 0x5e, 0xa5, 0xae, 0x6a, 0x8b, 0xc6, 0x40, 0xeb, 0x74, 0x12, 0x4c, 0xaf, 0xdc,
	0xcd, 0xc8, 0x8e, 0xa8, 0x9d, 0x98, 0xf4, 0xc2, 0xd6, 0x89, 0xfb, 0x85, 0xdb, 0x8f, 0x88, 0xfa,
	0x48, 0x07, 0xa3, 0xde, 0x9e, 0x6b, 0xca, 0x16, 0xbe, 0xfa, 0x21, 0x44, 0xb3, 0xcb, 0x89, 0xce,
	0x8a, 0xb6, 0x5c, 0x2b, 0xee, 0x84, 0x61, 0xf5, 0xb5, 0xc4, 0xc1, 0x22, 0x86, 0x70, 0x9f, 0x1f,
	0xe9, 0xf4, 0x0c, 0xe2, 0x0b, 0x6e, 0x6d, 0x2b, 0x0b, 0x5d, 0xe3, 0x46, 0x69, 0xe3, 0x14, 0x40,
	0x03, 0x7a, 0x86, 0x9d, 0xdb, 0x10, 0xff, 0x92, 0xb6, 0x11, 0x5c, 0xc4, 0x30, 0xcd, 0x75, 0xb6,
	0x1f, 0x47, 0x90, 0xe4, 0x64, 0x65, 0x43, 0x6d, 0xbb, 0x82, 0xa9, 0xf9, 0x32, 0x08, 0xd8, 0x9c,
	0x76, 0xa9, 0x59, 0x9c, 0x8b, 0xbb, 0xc5, 0xcb, 0x93, 0xff, 0x0b, 0x41, 0x5f, 0xa7, 0x99, 0x4e,
	0x8b, 0x56, 0x6a, 0x97, 0xde, 0x21, 0xe1, 0xea, 0x5d, 0x99, 0x85, 0xf7, 0xc4, 0xe7, 0x71, 0x82,
	0xd5, 0xf9, 0x43, 0xae, 0xd2, 0x8d, 0xbe, 0x5d, 0x0c, 0x2f, 0x2c, 0xe5, 0xf0, 0x3e, 0xca, 0xd9,
	0x24, 0xeb, 0xd8, 0x40, 0xcf, 0x8e, 0xc1, 0x98, 0x60, 0xe6, 0x66, 0xa3, 0xdf, 0xfd, 0x55, 0xb1,
	0xae, 0xd8, 0x84, 0xbd, 0x99, 0x15, 0x22, 0xb7, 0x85, 0x67, 0xdf, 0x8d, 0x7c, 0x38, 0x0e, 0xd7,
	0x1f, 0x0f, 0xbf, 0xbf, 0xe4, 0x2b, 0xb1, 0x74, 0x9e, 0x86, 0x76, 0x94, 0x3d, 0x8b, 0x7a, 0x00,
	0x31, 0x3c, 0x87, 0x6a, 0x9f, 0xef, 0x11, 0xc4, 0xb1, 0x96, 0x4f, 0xcc, 0xf5, 0xf5, 0x27, 0x30,
	0xbb, 0xe5, 0xb5, 0xa8, 0xd3, 0x8c, 0x95, 0x8f, 0x67, 0xfc, 0x9f, 0xc7, 0x4f, 0x96, 0xe8, 0xcf,
	0xf2, 0xe1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x38, 0x5e, 0xfd, 0x67, 0x06, 0x00, 0x00,
}
