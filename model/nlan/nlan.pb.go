// Code generated by protoc-gen-go.
// source: nlan.proto
// DO NOT EDIT!

/*
Package nlan is a generated protocol buffer package.

It is generated from these files:
	nlan.proto

It has these top-level messages:
	State
	Model
	Dvr
	Subnets
	IpDvr
	Vxlan
	Ptn
	Networks
	L2Vpn
	Links
	Nodes
	Router
	Bgp
	Neighbors
	Ospf
	Vhosts
	VhostProps
*/
package nlan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type State struct {
	Router map[string]*Model `protobuf:"bytes,1,rep,name=Router" json:"Router,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *State) GetRouter() map[string]*Model {
	if m != nil {
		return m.Router
	}
	return nil
}

type Model struct {
	Dvr    *Dvr    `protobuf:"bytes,1,opt,name=Dvr" json:"Dvr,omitempty"`
	Ptn    *Ptn    `protobuf:"bytes,2,opt,name=Ptn" json:"Ptn,omitempty"`
	Router *Router `protobuf:"bytes,3,opt,name=Router" json:"Router,omitempty"`
	Vhosts *Vhosts `protobuf:"bytes,4,opt,name=Vhosts" json:"Vhosts,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Model) GetDvr() *Dvr {
	if m != nil {
		return m.Dvr
	}
	return nil
}

func (m *Model) GetPtn() *Ptn {
	if m != nil {
		return m.Ptn
	}
	return nil
}

func (m *Model) GetRouter() *Router {
	if m != nil {
		return m.Router
	}
	return nil
}

func (m *Model) GetVhosts() *Vhosts {
	if m != nil {
		return m.Vhosts
	}
	return nil
}

type Dvr struct {
	OvsBridges bool       `protobuf:"varint,1,opt,name=OvsBridges" json:"OvsBridges,omitempty"`
	Subnets    []*Subnets `protobuf:"bytes,2,rep,name=Subnets" json:"Subnets,omitempty"`
	Vxlan      []*Vxlan   `protobuf:"bytes,3,rep,name=Vxlan" json:"Vxlan,omitempty"`
}

func (m *Dvr) Reset()                    { *m = Dvr{} }
func (m *Dvr) String() string            { return proto.CompactTextString(m) }
func (*Dvr) ProtoMessage()               {}
func (*Dvr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Dvr) GetSubnets() []*Subnets {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *Dvr) GetVxlan() []*Vxlan {
	if m != nil {
		return m.Vxlan
	}
	return nil
}

type Subnets struct {
	IpDvr []*IpDvr `protobuf:"bytes,1,rep,name=IpDvr" json:"IpDvr,omitempty"`
	Peers []string `protobuf:"bytes,2,rep,name=Peers" json:"Peers,omitempty"`
	Ports []string `protobuf:"bytes,3,rep,name=Ports" json:"Ports,omitempty"`
	Vid   uint32   `protobuf:"varint,4,opt,name=Vid" json:"Vid,omitempty"`
	Vni   uint32   `protobuf:"varint,5,opt,name=Vni" json:"Vni,omitempty"`
}

func (m *Subnets) Reset()                    { *m = Subnets{} }
func (m *Subnets) String() string            { return proto.CompactTextString(m) }
func (*Subnets) ProtoMessage()               {}
func (*Subnets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Subnets) GetIpDvr() []*IpDvr {
	if m != nil {
		return m.IpDvr
	}
	return nil
}

type IpDvr struct {
	Addr string `protobuf:"bytes,1,opt,name=Addr" json:"Addr,omitempty"`
	Dhcp string `protobuf:"bytes,2,opt,name=Dhcp" json:"Dhcp,omitempty"`
	Mode string `protobuf:"bytes,3,opt,name=Mode" json:"Mode,omitempty"`
}

func (m *IpDvr) Reset()                    { *m = IpDvr{} }
func (m *IpDvr) String() string            { return proto.CompactTextString(m) }
func (*IpDvr) ProtoMessage()               {}
func (*IpDvr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Vxlan struct {
	LocalIp   string   `protobuf:"bytes,1,opt,name=LocalIp" json:"LocalIp,omitempty"`
	RemoteIps []string `protobuf:"bytes,2,rep,name=RemoteIps" json:"RemoteIps,omitempty"`
}

func (m *Vxlan) Reset()                    { *m = Vxlan{} }
func (m *Vxlan) String() string            { return proto.CompactTextString(m) }
func (*Vxlan) ProtoMessage()               {}
func (*Vxlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Ptn struct {
	Networks []*Networks `protobuf:"bytes,1,rep,name=Networks" json:"Networks,omitempty"`
}

func (m *Ptn) Reset()                    { *m = Ptn{} }
func (m *Ptn) String() string            { return proto.CompactTextString(m) }
func (*Ptn) ProtoMessage()               {}
func (*Ptn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ptn) GetNetworks() []*Networks {
	if m != nil {
		return m.Networks
	}
	return nil
}

type Networks struct {
	Id    string   `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	L2Vpn []*L2Vpn `protobuf:"bytes,2,rep,name=L2Vpn" json:"L2Vpn,omitempty"`
	Links *Links   `protobuf:"bytes,3,opt,name=Links" json:"Links,omitempty"`
	Nodes *Nodes   `protobuf:"bytes,4,opt,name=Nodes" json:"Nodes,omitempty"`
}

func (m *Networks) Reset()                    { *m = Networks{} }
func (m *Networks) String() string            { return proto.CompactTextString(m) }
func (*Networks) ProtoMessage()               {}
func (*Networks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Networks) GetL2Vpn() []*L2Vpn {
	if m != nil {
		return m.L2Vpn
	}
	return nil
}

func (m *Networks) GetLinks() *Links {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Networks) GetNodes() *Nodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type L2Vpn struct {
	Ip    string   `protobuf:"bytes,1,opt,name=Ip" json:"Ip,omitempty"`
	Peers []string `protobuf:"bytes,2,rep,name=Peers" json:"Peers,omitempty"`
	Vid   uint32   `protobuf:"varint,3,opt,name=Vid" json:"Vid,omitempty"`
	Vni   uint32   `protobuf:"varint,4,opt,name=Vni" json:"Vni,omitempty"`
}

func (m *L2Vpn) Reset()                    { *m = L2Vpn{} }
func (m *L2Vpn) String() string            { return proto.CompactTextString(m) }
func (*L2Vpn) ProtoMessage()               {}
func (*L2Vpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Links struct {
	LocalIp   string   `protobuf:"bytes,1,opt,name=LocalIp" json:"LocalIp,omitempty"`
	RemoteIps []string `protobuf:"bytes,2,rep,name=RemoteIps" json:"RemoteIps,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Nodes struct {
	L2Sw string `protobuf:"bytes,1,opt,name=L2Sw" json:"L2Sw,omitempty"`
	Ptn  string `protobuf:"bytes,2,opt,name=Ptn" json:"Ptn,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Router struct {
	Bgp         []*Bgp  `protobuf:"bytes,1,rep,name=Bgp" json:"Bgp,omitempty"`
	EmbeddedBgp bool    `protobuf:"varint,2,opt,name=EmbeddedBgp" json:"EmbeddedBgp,omitempty"`
	Loopback    string  `protobuf:"bytes,3,opt,name=Loopback" json:"Loopback,omitempty"`
	Ospf        []*Ospf `protobuf:"bytes,4,rep,name=Ospf" json:"Ospf,omitempty"`
}

func (m *Router) Reset()                    { *m = Router{} }
func (m *Router) String() string            { return proto.CompactTextString(m) }
func (*Router) ProtoMessage()               {}
func (*Router) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Router) GetBgp() []*Bgp {
	if m != nil {
		return m.Bgp
	}
	return nil
}

func (m *Router) GetOspf() []*Ospf {
	if m != nil {
		return m.Ospf
	}
	return nil
}

type Bgp struct {
	As        uint32       `protobuf:"varint,1,opt,name=As" json:"As,omitempty"`
	Neighbors []*Neighbors `protobuf:"bytes,2,rep,name=Neighbors" json:"Neighbors,omitempty"`
}

func (m *Bgp) Reset()                    { *m = Bgp{} }
func (m *Bgp) String() string            { return proto.CompactTextString(m) }
func (*Bgp) ProtoMessage()               {}
func (*Bgp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Bgp) GetNeighbors() []*Neighbors {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type Neighbors struct {
	NextHopSelf          bool   `protobuf:"varint,1,opt,name=NextHopSelf" json:"NextHopSelf,omitempty"`
	Peer                 string `protobuf:"bytes,2,opt,name=Peer" json:"Peer,omitempty"`
	RemoteAs             uint32 `protobuf:"varint,3,opt,name=RemoteAs" json:"RemoteAs,omitempty"`
	RouteReflectorClient bool   `protobuf:"varint,4,opt,name=RouteReflectorClient" json:"RouteReflectorClient,omitempty"`
}

func (m *Neighbors) Reset()                    { *m = Neighbors{} }
func (m *Neighbors) String() string            { return proto.CompactTextString(m) }
func (*Neighbors) ProtoMessage()               {}
func (*Neighbors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type Ospf struct {
	Area     string   `protobuf:"bytes,1,opt,name=Area" json:"Area,omitempty"`
	Networks []string `protobuf:"bytes,2,rep,name=Networks" json:"Networks,omitempty"`
}

func (m *Ospf) Reset()                    { *m = Ospf{} }
func (m *Ospf) String() string            { return proto.CompactTextString(m) }
func (*Ospf) ProtoMessage()               {}
func (*Ospf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type Vhosts struct {
	VhostProps []*VhostProps `protobuf:"bytes,1,rep,name=VhostProps" json:"VhostProps,omitempty"`
}

func (m *Vhosts) Reset()                    { *m = Vhosts{} }
func (m *Vhosts) String() string            { return proto.CompactTextString(m) }
func (*Vhosts) ProtoMessage()               {}
func (*Vhosts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Vhosts) GetVhostProps() []*VhostProps {
	if m != nil {
		return m.VhostProps
	}
	return nil
}

type VhostProps struct {
	Network string `protobuf:"bytes,1,opt,name=Network" json:"Network,omitempty"`
	Vhosts  uint32 `protobuf:"varint,2,opt,name=Vhosts" json:"Vhosts,omitempty"`
}

func (m *VhostProps) Reset()                    { *m = VhostProps{} }
func (m *VhostProps) String() string            { return proto.CompactTextString(m) }
func (*VhostProps) ProtoMessage()               {}
func (*VhostProps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*State)(nil), "nlan.State")
	proto.RegisterType((*Model)(nil), "nlan.Model")
	proto.RegisterType((*Dvr)(nil), "nlan.Dvr")
	proto.RegisterType((*Subnets)(nil), "nlan.Subnets")
	proto.RegisterType((*IpDvr)(nil), "nlan.IpDvr")
	proto.RegisterType((*Vxlan)(nil), "nlan.Vxlan")
	proto.RegisterType((*Ptn)(nil), "nlan.Ptn")
	proto.RegisterType((*Networks)(nil), "nlan.Networks")
	proto.RegisterType((*L2Vpn)(nil), "nlan.L2Vpn")
	proto.RegisterType((*Links)(nil), "nlan.Links")
	proto.RegisterType((*Nodes)(nil), "nlan.Nodes")
	proto.RegisterType((*Router)(nil), "nlan.Router")
	proto.RegisterType((*Bgp)(nil), "nlan.Bgp")
	proto.RegisterType((*Neighbors)(nil), "nlan.Neighbors")
	proto.RegisterType((*Ospf)(nil), "nlan.Ospf")
	proto.RegisterType((*Vhosts)(nil), "nlan.Vhosts")
	proto.RegisterType((*VhostProps)(nil), "nlan.VhostProps")
}

var fileDescriptor0 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x51, 0x6b, 0x1a, 0x41,
	0x10, 0x46, 0x4f, 0x13, 0x6f, 0x2e, 0x26, 0x76, 0x5b, 0x5a, 0x09, 0xa1, 0x84, 0xa5, 0x34, 0x81,
	0x52, 0xa1, 0x96, 0x42, 0x09, 0x7d, 0x31, 0x4d, 0xa0, 0x82, 0x35, 0xa2, 0xd4, 0xb7, 0x16, 0x4e,
	0x6f, 0xd5, 0xab, 0x97, 0xdb, 0x63, 0x6f, 0x35, 0xc9, 0xbf, 0xef, 0xee, 0xec, 0x9c, 0x1e, 0x7d,
	0xca, 0x9b, 0xf3, 0xcd, 0xcc, 0xce, 0x37, 0xdf, 0x7c, 0x27, 0x40, 0x9a, 0x84, 0x69, 0x27, 0x53,
	0x52, 0x4b, 0x56, 0xb3, 0xbf, 0x79, 0x02, 0xf5, 0x89, 0x0e, 0xb5, 0x60, 0x17, 0x70, 0x30, 0x96,
	0x1b, 0x2d, 0x54, 0xbb, 0x72, 0xee, 0x5d, 0x06, 0xdd, 0x37, 0x1d, 0xac, 0xc5, 0x64, 0xc7, 0x65,
	0x6e, 0x53, 0xad, 0x9e, 0x4e, 0xaf, 0x20, 0x28, 0x85, 0x2c, 0x00, 0x6f, 0x2d, 0x9e, 0x4c, 0x53,
	0xe5, 0xd2, 0x67, 0xa7, 0x50, 0xdf, 0x86, 0xc9, 0x46, 0xb4, 0xab, 0x26, 0x0c, 0xba, 0x81, 0x7b,
	0xe3, 0xa7, 0x8c, 0x44, 0x72, 0x55, 0xfd, 0x5a, 0xe1, 0x39, 0xd4, 0x31, 0x60, 0xaf, 0xc1, 0xbb,
	0xd9, 0x2a, 0xec, 0x0a, 0xba, 0xbe, 0x2b, 0x33, 0x80, 0xc5, 0x47, 0x3a, 0xa5, 0x76, 0xc2, 0x0d,
	0xc0, 0xce, 0x76, 0xec, 0x3c, 0x4c, 0x1d, 0xb9, 0x94, 0xc3, 0x6c, 0x76, 0xba, 0x92, 0xb9, 0xce,
	0xdb, 0xb5, 0x72, 0xd6, 0x61, 0xfc, 0x17, 0xce, 0x62, 0x0c, 0xe0, 0x6e, 0x9b, 0x5f, 0xab, 0x38,
	0x5a, 0x8a, 0x1c, 0x27, 0x37, 0xd8, 0x5b, 0x38, 0x9c, 0x6c, 0x66, 0xa9, 0x30, 0x9d, 0x55, 0xdc,
	0xba, 0x49, 0x5b, 0x3b, 0xd0, 0xee, 0x33, 0x7d, 0x34, 0x80, 0x99, 0xea, 0xed, 0xf7, 0x41, 0x88,
	0xff, 0xde, 0xf5, 0xda, 0xb2, 0x7e, 0xe6, 0xf6, 0x29, 0x95, 0x21, 0xc4, 0x9a, 0x50, 0x1f, 0x09,
	0xa1, 0xdc, 0x00, 0x1f, 0x43, 0xa9, 0xcc, 0x3c, 0x0f, 0x43, 0xa3, 0xde, 0x34, 0x8e, 0x90, 0x76,
	0x13, 0x83, 0x34, 0x6e, 0xd7, 0x6d, 0xc0, 0x3f, 0xd1, 0x9b, 0xec, 0x08, 0x6a, 0xbd, 0x28, 0x52,
	0xa4, 0xb0, 0x89, 0x6e, 0x56, 0xf3, 0x0c, 0x15, 0xc2, 0xc8, 0xea, 0x89, 0xa2, 0xf8, 0xfc, 0x03,
	0xb1, 0x65, 0x27, 0x70, 0x38, 0x90, 0xf3, 0x30, 0xe9, 0x67, 0xd4, 0xf5, 0x02, 0xfc, 0xb1, 0xb8,
	0x97, 0x5a, 0xf4, 0x33, 0x22, 0xc2, 0x2f, 0x50, 0x69, 0x76, 0x0e, 0x8d, 0xa1, 0xd0, 0x0f, 0x52,
	0xad, 0x73, 0x62, 0x7f, 0xec, 0xd8, 0x17, 0x28, 0xff, 0xbb, 0xaf, 0x30, 0x12, 0x56, 0xfb, 0xd1,
	0xfe, 0xd6, 0x83, 0xee, 0x34, 0x4b, 0x49, 0x39, 0x5a, 0x1a, 0x21, 0xcc, 0xc5, 0xe9, 0x3a, 0xa7,
	0x6b, 0x15, 0x39, 0x0b, 0xd9, 0xdc, 0xd0, 0x70, 0x2e, 0x6e, 0x45, 0x39, 0x84, 0xf8, 0x37, 0x7a,
	0x13, 0x07, 0x15, 0xe4, 0xff, 0x53, 0x90, 0x24, 0xf3, 0xca, 0x92, 0xa1, 0x7e, 0x76, 0x7f, 0x37,
	0xe2, 0x39, 0xfb, 0x73, 0xa2, 0x61, 0x35, 0x1c, 0x74, 0x27, 0x0f, 0x54, 0x19, 0xec, 0x0d, 0xe8,
	0xf3, 0xb0, 0x70, 0x9d, 0xf5, 0xe5, 0xf5, 0x32, 0x23, 0x85, 0xc8, 0x97, 0x06, 0x60, 0x2f, 0x21,
	0xb8, 0xbd, 0x9f, 0x89, 0x28, 0x12, 0x91, 0xcd, 0x57, 0xd1, 0x55, 0x2d, 0x68, 0x0c, 0xa4, 0xcc,
	0x66, 0xe1, 0x7c, 0xed, 0x2e, 0xc3, 0xda, 0x50, 0xbb, 0xcb, 0xb3, 0x85, 0xe1, 0x69, 0xfb, 0xc1,
	0xf5, 0x5b, 0x84, 0x7f, 0xc1, 0x87, 0xed, 0xbe, 0x3d, 0x67, 0xca, 0x26, 0xe3, 0xe0, 0x0f, 0x45,
	0xbc, 0x5c, 0xcd, 0xa4, 0x2a, 0x6c, 0x79, 0x52, 0xdc, 0x84, 0x60, 0xfe, 0xa7, 0x54, 0x63, 0x49,
	0x0c, 0xc5, 0xa3, 0xfe, 0x21, 0xb3, 0x89, 0x48, 0x16, 0x64, 0x6d, 0xb3, 0x96, 0x55, 0x8d, 0x8c,
	0x62, 0x28, 0x39, 0x01, 0x7a, 0x39, 0x29, 0x77, 0x06, 0xaf, 0x70, 0xb7, 0xb1, 0x58, 0x24, 0x62,
	0xae, 0xa5, 0xfa, 0x9e, 0xc4, 0x22, 0xd5, 0x28, 0x65, 0x83, 0xbf, 0x77, 0x84, 0xd1, 0x7c, 0x4a,
	0x84, 0x24, 0x4e, 0xab, 0x64, 0x16, 0xa7, 0x62, 0xa7, 0xf8, 0xf2, 0xd8, 0x3b, 0x00, 0xfc, 0x35,
	0x52, 0x32, 0x2b, 0xac, 0xd4, 0x2a, 0x7d, 0x87, 0x88, 0xf3, 0x8f, 0xe5, 0x2a, 0x7b, 0x27, 0x7a,
	0x8f, 0x06, 0x1c, 0xef, 0x3e, 0x64, 0x4b, 0xbb, 0x39, 0x3b, 0xc0, 0xbf, 0xaa, 0xcf, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x02, 0x95, 0x37, 0xd9, 0xb8, 0x04, 0x00, 0x00,
}
